// This file handles static params generation for the individual exam pages\n// It runs at build time to determine which exam pages to pre-generate\n\nexport async function generateStaticParams() {\n  try {\n    // Try to read the CSV file to get actual exam numbers\n    const fs = require('fs')\n    const path = require('path')\n    const csvPath = path.join(process.cwd(), 'public', 'questions.csv')\n    \n    if (fs.existsSync(csvPath)) {\n      const csvContent = fs.readFileSync(csvPath, 'utf8')\n      const lines = csvContent.split('\\n')\n      const examNumbers = new Set<string>()\n      \n      // Skip header and parse exam numbers\n      for (let i = 1; i < lines.length; i++) {\n        const line = lines[i].trim()\n        if (line) {\n          const firstComma = line.indexOf(',')\n          if (firstComma > 0) {\n            const examNum = line.substring(0, firstComma).trim()\n            if (examNum && !isNaN(parseInt(examNum))) {\n              examNumbers.add(examNum)\n            }\n          }\n        }\n      }\n      \n      console.log('Found exam numbers:', Array.from(examNumbers).sort())\n      return Array.from(examNumbers).map(num => ({ examNumber: num }))\n    }\n  } catch (error) {\n    console.error('Error reading CSV for static params:', error)\n  }\n  \n  // Fallback to a reasonable range if CSV reading fails\n  console.log('Using fallback exam numbers 1-20')\n  return Array.from({ length: 20 }, (_, i) => ({ examNumber: (i + 1).toString() }))\n}\n